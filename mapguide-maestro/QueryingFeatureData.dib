#!markdown

# Querying Feature Data with the MapGuide Maestro API

#!markdown

> TODO: Can we somehow "modularize" this setup code so that all subsequent interactive notebooks can reuse the same nuget install + setup code?

Firstly, add a reference to the [`OSGeo.MapGuide.MaestroAPI`](https://www.nuget.org/packages/OSGeo.MapGuide.MaestroAPI) package on NuGet

#!csharp

#r "nuget:OSGeo.MapGuide.MaestroAPI,*-*"

#!markdown

Then create a new server connection

#!csharp

using OSGeo.MapGuide.MaestroAPI;
using OSGeo.MapGuide.MaestroAPI.Commands;
using OSGeo.MapGuide.MaestroAPI.Services;
using OSGeo.MapGuide.ObjectModels;
using OSGeo.MapGuide.ObjectModels.MapDefinition;
using System.Drawing;
using System.IO;
using Microsoft.DotNet.Interactive.Formatting;

// Change this to match your MapGuide server install as needed
var mapAgentUri = "http://localhost:8018/mapguide/mapagent/mapagent.fcgi";

var conn = ConnectionProviderRegistry.CreateConnection("Maestro.Http",
    "Url", mapAgentUri,
    "Username", "Administrator",
    "Password", "admin");

#!markdown

## Feature Readers

A feature reader, represented by the `IFeatureReader` interface, is used to iterate through a list of features. Typically, the feature reader is created through selecting features from a feature source using the `IFeatureService.QueryFeatureSource()` method.

To process the features in a feature reader, use the `ReadNext()` method on the `IFeatureReader` instance. You must call this method before being able to read the first feature. Continue calling the method to process the rest of the features.

> NOTE: You should always call `Close()` on your `IFeatureReader` instances when done. Otherwise memory leaks can happen on the server-side due to unclosed reader objects. To ensure this is called (even in the face of any exceptions being thrown), you should wrap the feature reader in a `using` block

> NOTE: Always check if the property whose value you are trying to retrieve is null using the `IsNull()` method before attempting to access the property value. Attempting to access a null property value will cause an exception to be thrown

## Making selections

To create a feature reader, apply a selection filter to a feature class in the feature source. A selection filter can be a:

 * A basic filter
 * A spatial filter
 * A combination of the above.

Basic filters are used to select features based on the values of feature properties. For example, you could use a basic filter to select all roads that have four or more lanes.

Spatial filters are used to select features based on their geometry. For example, you could use a spatial filter to select all roads that intersect an area.

### Basic Filters

Basic filters perform logical tests of feature properties. You can construct complex queries by combining FDO expressions. FDO expressions use the comparison operators below.

| Operator | Meaning |
|----------|---------|
| `=`      | Equality |
| `<>`     | Not Equal |
| `<`      | Less Than |
| `<=`     | Less Than or Equal To |
| `>`      | Greater Than |
| `>=`     | Greater Than or Equal To |
| `LIKE`   | Used for string comparisons. The `%` wildcard represents any sequence of 0 or more characters. The `_` wildcard represents any single character. For example, `LIKE 'SCHMITT%'` will begin search for any names beginning with `SCHMITT` |

The comparison operators can be used with numeric or string properties, except for the `LIKE` operator, which can only be used with string properties.

Combine or modify expressions with the standard boolean operators `AND`, `OR` and `NOT`.

### Spatial Filters

With spatial filters, you can do comparisons using geometric properties. For example, you can select all features that are inside an area on the map, or that intersect an area.

To include spatial properties in a basic filter, define the geometry using WKT format. Use the `GeomFromText()` function in the basic filter, along with one of the following spatial operations:

 * `CONTAINS`
 * `COVEREDBY`
 * `CROSSES`
 * `DISJOINT`
 * `EQUALS`
 * `INTERSECTS`
 * `OVERLAPS`
 * `TOUCHES`
 * `WITHIN`
 * `INSIDE`

> NOTE: Spatial operation support varies between FDO providers. Check the capabilities of the respective FDO provider to determine what spatial operations are supported.

#!markdown

# Examples

These examples assume that you are querying a parcels feature source in our example data set. You can run this code snippet below to check if this feature source exists

#!csharp

var featureSource = "Library://Samples/Sheboygan/Data/Parcels.FeatureSource";
var featureClass = "SHP_Schema:Parcels";

// Check that the given feature source exists
if (!conn.ResourceService.ResourceExists(featureSource))
{
    Console.WriteLine("Example feature source does not exist. Please ensure this sample data is loaded before proceeding");
}
else
{
    Console.WriteLine($"Feature source ({featureSource}) exists. All good!");
    // Now we'll check if the given feature class exists in this feature source
    var featureSourceDesc = conn.FeatureService.DescribeFeatureSource(featureSource);
    var klass = featureSourceDesc.GetClass(featureClass);
    if (klass == null)
    {
        Console.WriteLine($"Feature class ({featureClass}) not found. Please ensure this sample data is loaded before proceeding");
    }
    else
    {
        Console.WriteLine($"Feature class ({featureClass}) found. All good!");
    }
}

#!markdown

To select features built after 2001, create a filter like this (this example also limits the number of results for ease of display in this notebook)

#!csharp

var filter = "YRBUILT > 2001"; //Our FDO expression filter
var limit = 10; //Limit the number of results. To get everything, pass in null
var results = new List<object>(); //Our list of results for display in this notebook
using (var reader = conn.FeatureService.QueryFeatureSource(featureSource, featureClass, filter, null, null, limit))
{
    while (reader.ReadNext())
    {
        // NOTE: We know the structure of this example feature source up front so we know what property names to read and what
        // data types they are. For general-purpose queries where you don't know this information up-front, you would look at 
        // the ClassDefinition property of this reader to see what properties are in this result (and their data types)
        var feature = new
        {
            ParcelId = reader.GetInt32("Autogenerated_SDF_ID"),
            Name = !reader.IsNull("NAME") ? reader.GetString("NAME") : null,
            YearBuilt = !reader.IsNull("YRBUILT") ? reader.GetInt32("YRBUILT") : (int?)null,
            Address = !reader.IsNull("RBILAD") ? reader.GetString("RBILAD") : null,
            Description = !reader.IsNull("RLDESCR1") ? reader.GetString("RLDESCR1") : null,
            Type = !reader.IsNull("RTYPE") ? reader.GetString("RTYPE") : null
        };
        results.Add(feature);
    }
}
display(results);

#!markdown

To select features built between 2001 and 2004, create a filter like this

#!csharp

var filter = "YRBUILT >= 2001 AND YRBUILT <= 2004"; //Our FDO expression filter
var limit = 10; //Limit the number of results. To get everything, pass in null
var results = new List<object>(); //Our list of results for display in this notebook
using (var reader = conn.FeatureService.QueryFeatureSource(featureSource, featureClass, filter, null, null, limit))
{
    while (reader.ReadNext())
    {
        // NOTE: We know the structure of this example feature source up front so we know what property names to read and what
        // data types they are. For general-purpose queries where you don't know this information up-front, you would look at 
        // the ClassDefinition property of this reader to see what properties are in this result (and their data types)
        var feature = new
        {
            ParcelId = reader.GetInt32("Autogenerated_SDF_ID"),
            Name = !reader.IsNull("NAME") ? reader.GetString("NAME") : null,
            YearBuilt = !reader.IsNull("YRBUILT") ? reader.GetInt32("YRBUILT") : (int?)null,
            Address = !reader.IsNull("RBILAD") ? reader.GetString("RBILAD") : null,
            Description = !reader.IsNull("RLDESCR1") ? reader.GetString("RLDESCR1") : null,
            Type = !reader.IsNull("RTYPE") ? reader.GetString("RTYPE") : null
        };
        results.Add(feature);
    }
}
display(results);

#!markdown

To select all features owned by anyone whose name starts with `Davi`, create a filter like this

#!csharp

var filter = "RNAME LIKE 'Davi%'"; //Our FDO expression filter
var limit = 10; //Limit the number of results. To get everything, pass in null
var results = new List<object>(); //Our list of results for display in this notebook
using (var reader = conn.FeatureService.QueryFeatureSource(featureSource, featureClass, filter, null, null, limit))
{
    while (reader.ReadNext())
    {
        // NOTE: We know the structure of this example feature source up front so we know what property names to read and what
        // data types they are. For general-purpose queries where you don't know this information up-front, you would look at 
        // the ClassDefinition property of this reader to see what properties are in this result (and their data types)
        var feature = new
        {
            ParcelId = reader.GetInt32("Autogenerated_SDF_ID"),
            Name = !reader.IsNull("NAME") ? reader.GetString("NAME") : null,
            YearBuilt = !reader.IsNull("YRBUILT") ? reader.GetInt32("YRBUILT") : (int?)null,
            Address = !reader.IsNull("RBILAD") ? reader.GetString("RBILAD") : null,
            Description = !reader.IsNull("RLDESCR1") ? reader.GetString("RLDESCR1") : null,
            Type = !reader.IsNull("RTYPE") ? reader.GetString("RTYPE") : null
        };
        results.Add(feature);
    }
}
display(results);

#!markdown

### Creating Geometry Objects from Features

You may want to use an existing feature as part of a spatial query. To retrieve the feature's geometry and convert it into an appropriate format for a query, perform the following steps:

 1. Query the feature class containing the feature
 2. Obtain the feature from the `IFeatureReader`
 3. Get the geometry data from the feature
 4. Convert the geometry data to WKT.
 5. Query the original feature class using the geometry data that is part of the query's spatial filter

#!markdown

This example below selects features who is owned by `SCHMITT` and whose geometry is within the area of `Voting District 6`. Result set is limited for ease of display in this notebook

#!csharp

// Query our voting districts for voting district 6
var votingDistrictsId = "Library://Samples/Sheboygan/Data/VotingDistricts.FeatureSource";
var votingDistrictsClass = "Default:VotingDistricts";
var districtFilter = "ID = 6";
string geometryWkt = null;
using (var reader = conn.FeatureService.QueryFeatureSource(votingDistrictsId, votingDistrictsClass, filter))
{
    if (reader.ReadNext())
    {
        // Use the class definition in the reader to determine the geometry property name to access geometry data from
        // the reader
        var geomProp = reader.ClassDefinition.DefaultGeometryPropertyName;
        
        // Access the geometry of this feature
        var geom = reader.GetGeometry(geomProp);

        // Convert it to well-known-text (WKT)
        geometryWkt = geom.AsText();
    }
    else
    {
        throw new Exception("Could not find expected voting district 6");
    }
}

// Now query the parcels using our spatial filter
var filter = $"RNAME LIKE 'SCHMITT%' AND SHPGEOM INSIDE GeomFromText('{geometryWkt}')"; //Our FDO expression filter
var limit = 10; //Limit the number of results. To get everything, pass in null
var results = new List<object>(); //Our list of results for display in this notebook
using (var reader = conn.FeatureService.QueryFeatureSource(featureSource, featureClass, filter, null, null, limit))
{
    while (reader.ReadNext())
    {
        // NOTE: We know the structure of this example feature source up front so we know what property names to read and what
        // data types they are. For general-purpose queries where you don't know this information up-front, you would look at 
        // the ClassDefinition property of this reader to see what properties are in this result (and their data types)
        var feature = new
        {
            ParcelId = reader.GetInt32("Autogenerated_SDF_ID"),
            Name = !reader.IsNull("NAME") ? reader.GetString("NAME") : null,
            YearBuilt = !reader.IsNull("YRBUILT") ? reader.GetInt32("YRBUILT") : (int?)null,
            Address = !reader.IsNull("RBILAD") ? reader.GetString("RBILAD") : null,
            Description = !reader.IsNull("RLDESCR1") ? reader.GetString("RLDESCR1") : null,
            Type = !reader.IsNull("RTYPE") ? reader.GetString("RTYPE") : null
        };
        results.Add(feature);
    }
}
display(results);
